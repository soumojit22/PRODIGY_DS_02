import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

sns.set_style("whitegrid")
plt.rcParams['figure.figsize'] = (10, 6)

try:
    train_df = pd.read_csv('train.csv')
    print("Dataset 'train.csv' loaded successfully.")
except FileNotFoundError:
    print("Error: train.csv not found. Please ensure the file is uploaded to your Colab environment.")
    exit()

print("\n--- Initial Data Inspection ---")
print("\nFirst 5 rows of the dataset:")
print(train_df.head().to_markdown(index=False, numalign="left", stralign="left"))

print("\nDataset Information (Data Types and Non-Null Counts):")
train_df.info()

print("\nDescriptive Statistics for Numerical Columns:")
print(train_df.describe().to_markdown(numalign="left", stralign="left"))

print("\n--- Data Cleaning ---")

print("\nMissing values before cleaning:")
print(train_df.isnull().sum().to_markdown(numalign="left", stralign="left"))

median_age = train_df['Age'].median()
train_df['Age'].fillna(median_age, inplace=True)
print(f"\n'Age' missing values imputed with median: {median_age}")

most_frequent_embarked = train_df['Embarked'].mode()[0]
train_df['Embarked'].fillna(most_frequent_embarked, inplace=True)
print(f"'Embarked' missing values imputed with mode: {most_frequent_embarked}")

train_df['Has_Cabin'] = train_df['Cabin'].notnull().astype(int)
train_df.drop('Cabin', axis=1, inplace=True)
print("\n'Cabin' column dropped and 'Has_Cabin' feature created.")

print("\nMissing values after cleaning:")
print(train_df.isnull().sum().to_markdown(numalign="left", stralign="left"))

num_duplicates = train_df.duplicated().sum()
if num_duplicates > 0:
    print(f"\nFound {num_duplicates} duplicate rows. Removing them.")
    train_df.drop_duplicates(inplace=True)
else:
    print("\nNo duplicate rows found.")

print("\n--- Exploratory Data Analysis (EDA) ---")

print("\nDistribution of 'Survived':")
plt.figure(figsize=(6, 4))
sns.countplot(x='Survived', data=train_df, palette='viridis')
plt.title('Distribution of Survival (0 = No, 1 = Yes)')
plt.xlabel('Survived')
plt.ylabel('Count')
plt.xticks([0, 1], ['No', 'Yes'])
plt.show()

print("\nDistribution of 'Pclass':")
plt.figure(figsize=(6, 4))
sns.countplot(x='Pclass', data=train_df, palette='magma')
plt.title('Distribution of Passenger Class')
plt.xlabel('Passenger Class')
plt.ylabel('Count')
plt.show()

print("\nDistribution of 'Sex':")
plt.figure(figsize=(6, 4))
sns.countplot(x='Sex', data=train_df, palette='coolwarm')
plt.title('Distribution of Gender')
plt.xlabel('Gender')
plt.ylabel('Count')
plt.show()

print("\nDistribution of 'Age':")
plt.figure(figsize=(8, 5))
sns.histplot(train_df['Age'], bins=20, kde=True, color='skyblue')
plt.title('Distribution of Age')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

print("\nDistribution of 'Fare':")
plt.figure(figsize=(8, 5))
sns.histplot(train_df['Fare'], bins=30, kde=True, color='lightcoral')
plt.title('Distribution of Fare')
plt.xlabel('Fare')
plt.ylabel('Frequency')
plt.show()

print("\nDistribution of 'Embarked':")
plt.figure(figsize=(6, 4))
sns.countplot(x='Embarked', data=train_df, palette='plasma')
plt.title('Distribution of Embarkation Port')
plt.xlabel('Port of Embarkation')
plt.ylabel('Count')
plt.show()

print("\n--- Bivariate Analysis (Relationships with Survived) ---")

print("\nSurvival Rate by 'Pclass':")
plt.figure(figsize=(7, 5))
sns.barplot(x='Pclass', y='Survived', data=train_df, palette='magma')
plt.title('Survival Rate by Passenger Class')
plt.xlabel('Passenger Class')
plt.ylabel('Survival Rate')
plt.show()

print("\nSurvival Rate by 'Sex':")
plt.figure(figsize=(7, 5))
sns.barplot(x='Sex', y='Survived', data=train_df, palette='coolwarm')
plt.title('Survival Rate by Gender')
plt.xlabel('Gender')
plt.ylabel('Survival Rate')
plt.show()

print("\nSurvival Rate by 'Age':")
plt.figure(figsize=(10, 6))
sns.histplot(data=train_df, x='Age', hue='Survived', kde=True, bins=20, palette='viridis')
plt.title('Age Distribution by Survival')
plt.xlabel('Age')
plt.ylabel('Count')
plt.legend(title='Survived', labels=['No', 'Yes'])
plt.show()

print("\nSurvival Rate by 'Fare':")
plt.figure(figsize=(10, 6))
sns.histplot(data=train_df, x='Fare', hue='Survived', kde=True, bins=30, palette='viridis')
plt.title('Fare Distribution by Survival')
plt.xlabel('Fare')
plt.ylabel('Count')
plt.legend(title='Survived', labels=['No', 'Yes'])
plt.show()

print("\nSurvival Rate by 'Embarked':")
plt.figure(figsize=(7, 5))
sns.barplot(x='Embarked', y='Survived', data=train_df, palette='plasma')
plt.title('Survival Rate by Embarkation Port')
plt.xlabel('Port of Embarkation')
plt.ylabel('Survival Rate')
plt.show()

print("\nSurvival Rate by 'Has_Cabin':")
plt.figure(figsize=(6, 4))
sns.barplot(x='Has_Cabin', y='Survived', data=train_df, palette='cividis')
plt.title('Survival Rate by Cabin Presence (0=No, 1=Yes)')
plt.xlabel('Has Cabin')
plt.ylabel('Survival Rate')
plt.xticks([0, 1], ['No', 'Yes'])
plt.show()

print("\n--- Feature Engineering for EDA ---")

train_df['FamilySize'] = train_df['SibSp'] + train_df['Parch'] + 1
print("\n'FamilySize' feature created (SibSp + Parch + 1).")

train_df['IsAlone'] = (train_df['FamilySize'] == 1).astype(int)
print("'IsAlone' feature created (1 if FamilySize == 1, else 0).")

print("\nSurvival Rate by 'FamilySize':")
plt.figure(figsize=(9, 5))
sns.barplot(x='FamilySize', y='Survived', data=train_df, palette='viridis')
plt.title('Survival Rate by Family Size')
plt.xlabel('Family Size')
plt.ylabel('Survival Rate')
plt.show()

print("\nSurvival Rate by 'IsAlone':")
plt.figure(figsize=(6, 4))
sns.barplot(x='IsAlone', y='Survived', data=train_df, palette='magma')
plt.title('Survival Rate by IsAlone (0=Not Alone, 1=Alone)')
plt.xlabel('Is Alone')
plt.ylabel('Survival Rate')
plt.xticks([0, 1], ['Not Alone', 'Alone'])
plt.show()

print("\n--- Correlation Matrix of Numerical Features ---")
numerical_cols = train_df.select_dtypes(include=np.number).columns.tolist()
if 'PassengerId' in numerical_cols:
    numerical_cols.remove('PassengerId')

correlation_matrix = train_df[numerical_cols].corr()

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5)
plt.title('Correlation Matrix of Numerical Features')
plt.show()

print("\n--- EDA Complete ---")
print("\nKey observations:")
print("- Gender (Sex) and Passenger Class (Pclass) appear to be strong predictors of survival.")
print("- Age and Fare distributions show some differences between survivors and non-survivors.")
print("- Having a family (FamilySize > 1) or a cabin seems to increase survival chances.")
print("- The correlation matrix highlights relationships between numerical features.")
